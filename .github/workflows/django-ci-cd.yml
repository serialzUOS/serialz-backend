name: Django CI/CD

on:
  push:
    branches:
      - deploy
  pull_request:
    branches:
      - deploy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # GitHub Actions의 체크아웃 작업
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Python 캐시 설정
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 필요한 종속성 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Furiosa SDK
        run: |
          wget https://download.furiosa.ai/sdk/latest/furiosa-sdk.deb
          sudo apt-get install -y ./furiosa-sdk.deb
          echo "/usr/lib/furiosa" | sudo tee -a /etc/ld.so.conf.d/furiosa.conf
          sudo ldconfig
          echo "LD_LIBRARY_PATH=/usr/lib/furiosa:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=/usr/lib/furiosa/bin:$PATH" >> $GITHUB_ENV


      # Lint 및 테스트 실행
      - name: Run tests
        run: |
          python manage.py test

      # Base64로 저장된 PEM 키 디코딩
      - name: Decode PEM Key
        run: |
          echo "${{ secrets.PEM_KEY }}" | base64 -d > /tmp/deploy_key.pem
          chmod 600 /tmp/deploy_key.pem

      # 배포 스크립트 실행
      - name: Deploy to Server
        run: |
          ssh -i /tmp/deploy_key.pem -o StrictHostKeyChecking=no user@210.109.62.43 "cd /home/ubuntu/serialz/serialz-backend && docker-compose down && docker-compose up -d"
